{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"./window-size.service\";\nimport * as i3 from \"./crypto.service\";\nimport * as i4 from \"./local-storage.service\";\nimport * as i5 from \"./share-information.service\";\nexport let NavegationService = /*#__PURE__*/(() => {\n  class NavegationService {\n    constructor(objRouter, objWindowSizeService, objCryptoService, objLocalStorageService, objShareInformationService) {\n      this.objRouter = objRouter;\n      this.objWindowSizeService = objWindowSizeService;\n      this.objCryptoService = objCryptoService;\n      this.objLocalStorageService = objLocalStorageService;\n      this.objShareInformationService = objShareInformationService;\n    }\n    navegatePage(urlCurrent) {\n      this.objRouter.navigate([urlCurrent]);\n    }\n    listSelectMenu(urlCurrent) {\n      let listOption = [false, false, false, false, false, false, false];\n      let tabNavBar = [0, \"\", \"\"];\n      urlCurrent = urlCurrent.includes(\"/Product/View\") ? \"/Product/View\" : urlCurrent;\n      urlCurrent = urlCurrent.includes(\"/Service/View\") ? \"/Service/View\" : urlCurrent;\n      switch (urlCurrent) {\n        case \"/\":\n          {\n            listOption[0] = true;\n          }\n          break;\n        case \"/Home\":\n          {\n            listOption[0] = true;\n          }\n          break;\n        case \"/Product/List\":\n          {\n            listOption[1] = true;\n          }\n          break;\n        case \"/Product/View\":\n          {\n            listOption[1] = true;\n          }\n          break;\n        case \"/Product/ShoppingCar\":\n          {\n            listOption[1] = true;\n          }\n          break;\n        case \"/Service/List\":\n          {\n            listOption[2] = true;\n          }\n          break;\n        case \"/Service/View\":\n          {\n            listOption[2] = true;\n          }\n          break;\n        case \"/Offers\":\n          {\n            listOption[3] = true;\n          }\n          break;\n        case \"/Quotation\":\n          {\n            listOption[4] = true;\n          }\n          break;\n        case \"/Contact\":\n          {\n            listOption[5] = true;\n          }\n          break;\n        case \"/AboutUs\":\n          {\n            listOption[6] = true;\n          }\n          break;\n        case \"/Help\":\n          {\n            listOption[7] = true;\n          }\n          break;\n      }\n      return [listOption, tabNavBar];\n    }\n    currentSelectMenu(urlCurrent) {\n      let response = this.listSelectMenu(urlCurrent);\n      this.objShareInformationService.selectMenuMovil$.emit(response[0]);\n      this.objShareInformationService.viewTabNavBar$.emit(response[1]);\n    }\n    viewSideNav(viewSideNav) {\n      this.objShareInformationService.viewSideNav$.emit(viewSideNav);\n    }\n    validateToken(response) {\n      if (response == 401) {\n        this.objRouter.navigate([\"/Home\"]);\n        return false;\n      }\n      return true;\n    }\n    setPositionScrooll(position) {\n      if (position == 0) {\n        document.body.scrollTop = 0; // Safari\n        document.documentElement.scrollTop = 0;\n      } else {\n        document.body.scrollTop += position; // Safari\n        document.documentElement.scrollTop += position;\n      }\n    }\n    getPositionScrooll() {\n      let position = document.body.scrollTop;\n      position = document.documentElement.scrollTop;\n      return position;\n    }\n    static #_ = this.ɵfac = function NavegationService_Factory(t) {\n      return new (t || NavegationService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.WindowSizeService), i0.ɵɵinject(i3.CryptoService), i0.ɵɵinject(i4.LocalStorageService), i0.ɵɵinject(i5.ShareInformationService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: NavegationService,\n      factory: NavegationService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return NavegationService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}