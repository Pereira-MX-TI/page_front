{"ast":null,"code":"import { HttpHeaders, HttpParams } from \"@angular/common/http\";\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./crypto.service\";\nimport * as i3 from \"./local-storage.service\";\nexport let HttpService = /*#__PURE__*/(() => {\n  class HttpService {\n    //php artisan serve --host=192.168.1.9 --port=9000\n    //ng serve --port 4500 --host=192.168.1.9\n    //chrome://inspect/#devices\n    //http://127.0.0.1:8000\n    //https://pageserver.solucionesjmpf.com\n    constructor(objHttp, objCryptoService, objLocalStorageService) {\n      this.objHttp = objHttp;\n      this.objCryptoService = objCryptoService;\n      this.objLocalStorageService = objLocalStorageService;\n      this.versionApi = \"v1/\";\n    }\n    getHeaders(opc) {\n      switch (opc) {\n        case 0:\n          {\n            this.HEADERS = new HttpHeaders({\n              'Content-Type': 'application/json',\n              'Accept': 'application/json'\n            });\n          }\n          break;\n        case 1:\n          {\n            let currentAccount = {\n              token: environment.TOKEN,\n              user: {\n                id: 2,\n                name: \"Visitante web\",\n                email: \"visit@visit.com\",\n                type_user: {\n                  id: 4,\n                  type_user_name: \"Visitante\"\n                }\n              }\n            };\n            this.HEADERS = new HttpHeaders({\n              'Content-Type': 'application/json',\n              'Accept': 'application/json',\n              'Authorization': 'Bearer ' + this.objCryptoService.decrypted(currentAccount.token),\n              'datatoken': currentAccount.token\n            });\n          }\n          break;\n      }\n    }\n    getLogin(data) {\n      this.getHeaders(0);\n      let params = new HttpParams();\n      params = params.append('data', btoa(this.objCryptoService.encrypted(data)).replace(new RegExp(\"/\", \"g\"), \"~\"));\n      return this.objHttp.get(`${environment.API_URI}login`, {\n        headers: this.HEADERS,\n        params: params\n      });\n    }\n    getListCarousel(data) {\n      this.getHeaders(1);\n      let params = new HttpParams();\n      params = params.append('data', btoa(this.objCryptoService.encrypted(data)).replace(new RegExp(\"/\", \"g\"), \"~\"));\n      return this.objHttp.get(`${environment.API_URI}${this.versionApi}getListCarousel`, {\n        headers: this.HEADERS,\n        params: params\n      });\n    }\n    getCarousel(data) {\n      this.getHeaders(1);\n      let params = new HttpParams();\n      params = params.append('data', btoa(this.objCryptoService.encrypted(data)).replace(new RegExp(\"/\", \"g\"), \"~\"));\n      return this.objHttp.get(`${environment.API_URI}${this.versionApi}getCarousel`, {\n        headers: this.HEADERS,\n        params: params\n      });\n    }\n    getListProduct(data) {\n      this.getHeaders(1);\n      let params = new HttpParams();\n      params = params.append('data', btoa(this.objCryptoService.encrypted(data)).replace(new RegExp(\"/\", \"g\"), \"~\"));\n      return this.objHttp.get(`${environment.API_URI}${this.versionApi}getListProduct`, {\n        headers: this.HEADERS,\n        params: params\n      });\n    }\n    searchListProduct(data) {\n      this.getHeaders(1);\n      let params = new HttpParams();\n      params = params.append('data', btoa(this.objCryptoService.encrypted(data)).replace(new RegExp(\"/\", \"g\"), \"~\"));\n      return this.objHttp.get(`${environment.API_URI}${this.versionApi}searchListProduct`, {\n        headers: this.HEADERS,\n        params: params\n      });\n    }\n    autoCompletedProduct(data) {\n      this.getHeaders(1);\n      let params = new HttpParams();\n      params = params.append('data', btoa(this.objCryptoService.encrypted(data)).replace(new RegExp(\"/\", \"g\"), \"~\"));\n      return this.objHttp.get(`${environment.API_URI}${this.versionApi}autoCompletedProduct`, {\n        headers: this.HEADERS,\n        params: params\n      });\n    }\n    getProduct(data) {\n      this.getHeaders(1);\n      let params = new HttpParams();\n      params = params.append('data', btoa(this.objCryptoService.encrypted(data)).replace(new RegExp(\"/\", \"g\"), \"~\"));\n      return this.objHttp.get(`${environment.API_URI}${this.versionApi}getProduct`, {\n        headers: this.HEADERS,\n        params: params\n      });\n    }\n    getPublicity(data) {\n      this.getHeaders(1);\n      let params = new HttpParams();\n      params = params.append('data', btoa(this.objCryptoService.encrypted(data)).replace(new RegExp(\"/\", \"g\"), \"~\"));\n      return this.objHttp.get(`${environment.API_URI}${this.versionApi}getPublicity`, {\n        headers: this.HEADERS,\n        params: params\n      });\n    }\n    getIpAddress() {\n      return this.objHttp.get(\"https://api.ipify.org/?format=json\");\n    }\n    registerQuotationWeb(data) {\n      this.getHeaders(1);\n      const body = {\n        data: this.objCryptoService.encrypted(data)\n      };\n      return this.objHttp.post(`${environment.API_URI}${this.versionApi}registerQuotationWeb`, body, {\n        headers: this.HEADERS\n      });\n    }\n    registerInfoServiceWeb(data) {\n      this.getHeaders(1);\n      const body = {\n        data: this.objCryptoService.encrypted(data)\n      };\n      return this.objHttp.post(`${environment.API_URI}${this.versionApi}registerInfoServiceWeb`, body, {\n        headers: this.HEADERS\n      });\n    }\n    static #_ = this.ɵfac = function HttpService_Factory(t) {\n      return new (t || HttpService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.CryptoService), i0.ɵɵinject(i3.LocalStorageService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: HttpService,\n      factory: HttpService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return HttpService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}